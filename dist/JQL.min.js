/*!
 * JQL (JSON Query Language)
 * A simple intuitive JSON Query Language inspired by MySQL and jslinq made in javascript.
 * @version    : 0.1.0
 * @author     : DerianAndre
 * @repository : https://github.com/DerianAndre/JQL.git
 * @built      : 23/4/2021
 * @license    : MIT
 */
const g=!0,d=!1,w=!0,x=!1,t="~|~~|=|==|===|!=|!==|<|>|<=|>=",y="AND|&&|OR|[|]{2}",b=`(\\w+) (${t}) (\\w+)`,v=`(?:${b})*(${y})*`;!function(t,e){"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?module.exports=e():t.JQL=e()}(this,function(){function h(t){if(!(t&&t instanceof Array))throw new Error("[JQL] Invalid array");return this.items=t,this.length=t.length,this.select=e,this.where=i,this.limit=n,this.array=s,this.data=s,this.result=s,this.count=r,this.first=l,this.last=u,this.log=p,this.table=m,this.dir=f,this}function c(t){return"string"==typeof t?t.split(/[\s,]+/)?t.split(/[\s,]+/):[t]:t}function o(t,e){let i,n=[];const s=new RegExp(b,"gm");for(;null!==(i=s.exec(t));)i.index===s.lastIndex&&s.lastIndex++,i.forEach((t,e)=>{n[e]=t});let r=n[1],l=n[2],o=n[3];if(!r||!l||!o)return!1;switch("null"==o&&(o=null),"true"==o&&(o=!0),"false"==o&&(o=!1),/^\d+$/.test(o)&&(o=parseInt(o)),/^\d.\d+$/.test(o)&&(o=parseFloat(o)),l){case"~":return e[r].includes(o);case"=":case"==":return e[r]==o;case"===":return e[r]===o;case"!=":return e[r]!=o;case"!==":return e[r]!==o;case"<":return e[r]<o;case"<=":return e[r]<=o;case">":return e[r]>o;case">=":return e[r]>=o;default:return!1}}function e(n){if(!n||"*"===n)return new h(this.items);if(n&&"string"!=typeof n&&"array"!=typeof n)throw new Error("[JQL] .select() is invalid");var s=[],r={},l={};n=c(n);for(let e=0,i=0;e<this.items.length;e++){var o=this.items[e];for(let t=0;t<n.length;t++){for(var u in o)u==n[t]&&(l[u]=this.items[e][u],r[i]={...l});t==n.length-1&&(s[i]=r[i],i++)}}return new h(s)}function i(t){if(!t)throw new Error("[JQL] .where() Is invalid");for(var e=[],i=0;i<this.items.length;i++)("string"==typeof t?function(t,e){if(!t&&"string"!=typeof t||!e)return!1;let i=[],n,s=new RegExp(v,"gm");for(;n=s.exec(t);)n.index===s.lastIndex&&s.lastIndex++,n[0]&&i.push(n[0]);if(1==i.length)return o(i,e);let r=[],l=new RegExp(y,"gm");for(let t=0;t<i.length;t++)l.exec(i[t])||r.push(o(i[t],e));if(i.length%2==0)throw new Error(`[JQL] expression "${t}" is invalid`);switch(i[1]){case"&&":case"AND":return!r.includes(!1);case"||":case"OR":return!!r.includes(!0);default:return!1}}(t,this.items[i]):t(this.items[i]))&&e.push(this.items[i]);return new h(e)}function n(t=!1){if(0==t||null==t)return new h(this.items);if(t&&t<0)throw new Error("Value must be greater or equals zero");for(var e=[],i=0;i<this.items.length;i++)e.push(this.items[i]);return new h(e.slice(0,t))}function s(){return this.items}function r(){return this.length}function l(t=!0){return 0===this.length?null:t?this.items[0]:new h([this.items[0]])}function u(t=!0){return 0===this.length?null:t?this.items[this.length-1]:new h([this.items[this.length-1]])}function a(t,e,i,n,s){var r="line-height: 1; padding: 10px 20px; font-size: 13px; color: white; background: #10151E url(https://derianandre.com/assets/projects/JQL/JQL-white.svg) no-repeat; background-position: 95% center; background-size: auto 12px;\tborder-radius: 15px;";e=`%c[JQL] ${e} (${"number"==typeof i?i:n.length} / ${n.length})\t\t`,t?console.groupCollapsed(e,r):console.group(e,r),s(),console.groupEnd()}function f(t={collapse:w,limit:x,items:g,options:!1}){let e=t.collapse,i=t.items,n=t.limit,s=t.options,r;r="boolean"==typeof i&&i?this.limit(n).items:this,a(e,"Dir  ",n,this,()=>{console.dir(r,s)})}function p(t={collapse:w,limit:x,items:g}){let e=t.collapse,i=t.items,n=t.limit,s;s=i?this.limit(n).items:this,a(e,"Log  ",n,this,()=>{console.log(s)})}function m(t={collapse:w,columns:d,limit:x}){let e=t.collapse,i=c(t.columns),n=t.limit;a(e,"Table",n,this,()=>{console.table(this.limit(n).items,i)})}return function(t){return new h(t)}});